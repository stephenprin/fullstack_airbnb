// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?   @unique
  name      String?
  emailVerfied DateTime?
  hashedPassword  String?
  image     String? 
  favorites String[] @db.ObjectId
  account Account[ ]
  listings Listing[ ]
  reservations Reservation[ ]
}
model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  @map("userId") @db.ObjectId
  provider  String?
  type     String? 
  providerAccountId String?
  refreshToken String? @db.String
  accessToken String? @db.String
  accessTokenExpires DateTime?  
  token_type String?
  scope String?
  idToken String?
  sessionState String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Listing{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?   @db.ObjectId
  title     String?
  description String?
  image     String? 
  category  String?
  roomCount Int?
  bathroomCount Int?
  guestCount Int?
  locationValue String?
  reservation Reservation[]
  price     Int?
 
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reservation{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  userId    String?   @db.ObjectId
  listingId String?   @db.ObjectId
  checkIn   DateTime?
  checkOut  DateTime?
  guestCount Int?
  totalPrice     Int?

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}